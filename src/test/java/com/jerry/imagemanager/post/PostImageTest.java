package com.jerry.imagemanager.post;

import com.jerry.imagemanager.global.error.exception.InvalidRequestException;
import com.jerry.imagemanager.domain.post.Post;
import com.jerry.imagemanager.domain.post.PostImage;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static com.jerry.imagemanager.global.error.ErrorCode.BAD_REQUEST;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;

class PostImageTest {
    @Nested
    @DisplayName("PostImage 엔티티 생성 테스트")
    class PostImageCreationTest {
        @Nested
        @DisplayName("PostImage 엔티티 생성 실페 테스트")
        @TestInstance(PER_CLASS)
        class PostImageCreationFailTest {
            @ParameterizedTest
            @MethodSource("imageUrlParameter")
            @DisplayName("imageUrl이 잘못된 경우")
            void testWrongImageUrl(String imageUrl) {
                Post post = new Post("삼색이는 너무 귀여워!");

                assertThatThrownBy(() -> new PostImage(imageUrl, post))
                        .isInstanceOf(InvalidRequestException.class)
                        .hasMessage(BAD_REQUEST.getMessage());;
            }

            @Test
            @DisplayName("post가 잘못된 경우")
            void testWrongPost() {
                assertThatThrownBy(() -> new PostImage("http://www.culture.go.kr/upload/rdf/22/07/show_2022071411402126915.png", null))
                        .isInstanceOf(InvalidRequestException.class)
                        .hasMessage(BAD_REQUEST.getMessage());;
            }

            private Stream<Arguments> imageUrlParameter() {
                return Stream.of(null, Arguments.of(""), Arguments.of("    "), Arguments.of("alfjaljflajfljda"), Arguments.of("http://www.culture.go.kr/upload/rdf/22/07/showshowpng"));
            }
        }


        @Test
        @DisplayName("PostImage 엔티티 생성 성공 테스트")
        void testPostImageCreationSuccess() {
            String imageUrl = "http://www.culture.go.kr/upload/rdf/22/07/show_2022071411402126915.png";
            Post post = new Post("삼색이는 너무 귀여워!");

            PostImage postImage = new PostImage(imageUrl, post);
            assertThat(postImage)
                    .hasFieldOrPropertyWithValue("imageUrl", imageUrl)
                    .hasFieldOrPropertyWithValue("post", post);
        }


    }
}